setwd("C:/Users/nourv/OneDrive/Desktop/Stage insep/Application/MedInTech/Optojump")
#Analyse résultats questionnaire salon medintechs
formulaire <- read.csv(file = "Retours utilisateur/Expérience utilisateur MedInTech (réponses) - Réponses au formulaire 1.csv")
row.names??
quit
?row.names
nouveaux_noms <- c("Horodateur", "1", "2","3","4","5")
# Assurez-vous que la longueur de nouveaux_noms correspond au nombre de colonnes dans df
colnames(formulaire) <- nouveaux_noms
# Vérifiez que les noms des colonnes ont été mis à jour
head(formulaire)
graphe_radar(formulaire,"1")
source("Fonctions.R")
graphe_radar(formulaire,"1")
graphe_radar(formulaire,"1")
source("Fonctions.R")
graphe_radar(formulaire,"1")
graphe_radar(formulaire,"3")
graphe_radar(formulaire,"4")
graph_interactif_textes(formulaire, "1", "2")
source("Fonctions.R")
graph_interactif_textes(formulaire, "1", "2")
graph_interactif_textes(formulaire, "1", "2")
graph_interactif_textes(formulaire, "1", "test")
graph_interactif_textes(formulaire, "2", "1")
library(DT)
install.packages("DT")
source("Fonctions.R")
tableau_interactif_textes(formulaire, "2")
source("Fonctions.R")
tableau_interactif_textes(formulaire, "2")
source("Fonctions.R")
tableau_interactif_textes(formulaire, "2")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.csv(file = "results_globaux_CMJ.csv")
record_elena <- max(subset(donnees, isAthlete == TRUE, Sexe == "Femme")$Hauteur)
donnees<-read.csv(file = "results_globaux_CMJ.csv")
record_elena <- max(subset(donnees, isAthlete == TRUE, Sexe == "Femme")$Hauteur)
subset(donnees, isAthlete == TRUE, Sexe == "Femme")$Hauteur
donnees
View(donnees)
donnees$Hauteur
max(donnees$Hauteur)
library(dplyr)
max(donnees %>% dplyr::filter(isAthlete,Sexe =="Femme") %>% pull(Hauteur))
?subset
record_elena <- max(subset(donnees, isAthlete == TRUE & Sexe == "Femme")$Hauteur)
record_elena
runApp()
?dplyr
runApp()
runApp()
max(donnees %>% dplyr::filter(isAthlete == FALSE & Sexe =="Femme") %>% pull(Hauteur))
max(donnees %>% dplyr::filter(isAthlete == FALSE) %>% pull(Hauteur))
max(donnees %>% dplyr::filter(isAthlete == FALSE & Sexe =="Femme") %>% pull(Hauteur))
runApp()
runApp()
runApp()
graphe_radar(formulaire,"1")
graphe_radar(formulaire,"3")
graphe_radar(formulaire,"4")
source("Fonctions.R")
#Analyse résultats questionnaire salon medintechs
formulaire <- read.csv(file = "Retours utilisateur/Expérience utilisateur MedInTech (réponses) - Réponses au formulaire 1.csv")
nouveaux_noms <- c("Horodateur", "1", "2","3","4","5")
# Assurez-vous que la longueur de nouveaux_noms correspond au nombre de colonnes dans df
colnames(formulaire) <- nouveaux_noms
# Vérifiez que les noms des colonnes ont été mis à jour
head(formulaire)
graphe_radar(formulaire,"1")
graphe_radar(formulaire,"3")
graphe_radar(formulaire,"4")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Générer le texte des résultats
result_text <- tags$div(
tags$br(),
tags$strong(style = "font-size:2.2em;", "Résultats"),
tags$br(),
tags$br(),
tags$span(style = "font-size:2.2em;color:#C5246D;", "Votre record : "),
tags$strong(style = "font-size:2.2em,color : rgb(0,0,0),animation : glow 1s ease-in-out infinite alternate;"
, round(record_visiteur(), 2)),
tags$strong(class = "record_value", " cm"),
tags$br(),
tags$br(),
tags$br(),
tags$span(style = "font-size:2.2em;", "Autres essais : "),
tags$br(),
tags$strong(style = "font-size:2.2em;", deux_visiteur()),
tags$strong(style = "font-size:2.2em;", " cm"),
tags$br(),
tags$strong(style = "font-size:2.2em;", trois_visiteur()),
tags$strong(style = "font-size:2.2em;", " cm"),
tags$br(),
tags$br(),
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
graphe_radar <- function(df, nom_colonne) {
# Vérifiez que le nom de colonne existe dans le data frame
if(!nom_colonne %in% colnames(df)) {
stop("Le nom de colonne fourni n'existe pas dans le data frame.")
}
# Calculez les fréquences des valeurs dans la colonne
frequences <- table(df[[nom_colonne]])
# Préparez les données pour le graphe radar
radar_data <- as.data.frame(frequences)
colnames(radar_data) <- c("Valeurs", "Frequences")
# Créez le graphe radar avec plotly
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = radar_data$Frequences,
theta = radar_data$Valeurs,
name = nom_colonne
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = TRUE,
range = c(0, max(radar_data$Frequences))
)
),
title = paste("Graphe radar de la colonne", nom_colonne)
)
fig
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(pracma)
plot_smooth_line_ggplot <- function(df, col_name) {
# Vérifier si la colonne index existe dans le data frame
if (!"index" %in% colnames(df)) {
# Créer une colonne index à partir d'une séquence numérique
df$index <- 1:nrow(df)
}
# Calculer les valeurs minimale et maximale de la colonne
min_val <- min(df[, col_name])
max_val <- max(df[, col_name])
mean_val <- mean(df[, col_name])
# Extraire la colonne y et appliquer le filtre de Savitzky-Golay
y <- df[, col_name]
window_length <- 11
polyorder <- 2
y_smooth <- savgol(y, window_length, polyorder)
# Créer un objet ggplot à partir du data frame
p <- ggplot(data = df, aes(x = index, y = y_smooth)) +
geom_line(color = "#C5243D", linetype = "dashed") +
geom_hline(yintercept = min_val, linetype = "dashed", color = "#2C2F65") +
geom_hline(yintercept = max_val, linetype = "dashed", color = "#2C2F65") +
geom_hline(yintercept = mean_val, linetype = "dashed", color = "black") +
labs(title = paste("Evolution de", col_name),
x = "Index",
y = col_name) +
annotate("text", x = Inf, y = min_val, label = paste("Min :", round(min_val, 2)), hjust = 1.1, vjust = 0) +
annotate("text", x = Inf, y = max_val, label = paste("Max :", round(max_val, 2)), hjust = 1.1, vjust = 0)
# Renvoie le graphique
p
}
# Définir la longueur du jeu de données
n <- 100
# Créer un vecteur de temps
time <- seq(1, n, length.out = n)
# Créer un vecteur de données avec un maximum à 6,74 et un minimum à 4,05
data <- 4 + 1.5 * sin(2 * pi * time / 20) + rnorm(n, sd = 0.2)
data[time == 40] <- 6.74
data[time == 70] <- 4.05
# Créer un data frame avec les données
df <- data.frame(time, data)
# Afficher les premières lignes du data frame
head(df)
plot_smooth_line_ggplot(df, "data")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
radar_chart <- function(df, col2, col3, col4, col5) {
# Calculer les moyennes centrées réduites pour chaque colonne et chaque groupe
tcG <- scale(df %>% dplyr::filter(G.D == "G") %>% pull({{col2}}))
tcD <- scale(df %>% dplyr::filter(G.D == "D") %>% pull({{col2}}))
tvG <- scale(df %>% dplyr::filter(G.D == "G") %>% pull({{col3}}))
tvD <- scale(df %>% dplyr::filter(G.D == "D") %>% pull({{col3}}))
RthG <- scale(df %>% dplyr::filter(G.D == "G") %>% pull({{col4}}))
RthD <- scale(df %>% dplyr::filter(G.D == "D") %>% pull({{col4}}))
DlG <- scale(df %>% dplyr::filter(G.D == "G") %>% pull({{col5}}))
DlD <- scale(df %>% dplyr::filter(G.D == "D") %>% pull({{col5}}))
# Créer la liste des valeurs pour le graphe radar
values <- list(
list(r = c(mean(tcG), mean(tvG), mean(RthG), mean(DlG)), theta = c("Contact", "Vol", "Rythme", "Décalage latéral"), name = "G", fill = "toself"),
list(r = c(mean(tcD), mean(tvD), mean(RthD), mean(DlD)), theta = c("Contact", "Vol", "Rythme", "Décalage latéral"), name = "D", fill = "toself")
)
# Créer le graphe radar
fig <- plot_ly()
for (i in seq_along(values)) {
fig <- fig %>% add_trace(
type = "scatterpolar",
r = values[[i]]$r,
theta = values[[i]]$theta,
name = values[[i]]$name,
fill = values[[i]]$fill
)
}
# Définir les options de mise en forme du graphe
fig <- fig %>%
layout(
title = "Radar Chart",
polar = list(
radialaxis = list(
visible = TRUE,
range = c(-3, 3) # Mettre à jour la plage de l'axe radial
)
),
showlegend = TRUE
)
# Renvoie le graphe radar
fig
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("Fonctions.R")
#Analyse résultats questionnaire salon medintechs
formulaire <- read.csv(file = "Retours utilisateur/Expérience utilisateur MedInTech (réponses) - Réponses au formulaire 1.csv")
nouveaux_noms <- c("Horodateur","1","2","3","4","5")
source("Fonctions.R")
#Analyse résultats questionnaire salon medintechs
formulaire <- read.csv(file = "Retours utilisateur/Expérience utilisateur MedInTech (réponses) - Réponses au formulaire 1.csv")
nouveaux_noms <- c("Horodateur","1","2","3","4","5")
# Assurez-vous que la longueur de nouveaux_noms correspond au nombre de colonnes dans df
colnames(formulaire) <- nouveaux_noms
# Vérifiez que les noms des colonnes ont été mis à jour
head(formulaire)
graphe_radar(formulaire,"1")
graphe_radar(formulaire,"3")
graphe_radar(formulaire,"4")
tableau_interactif_textes(formulaire, "2")
runApp()
runApp()
runApp()
runApp()
runApp()
